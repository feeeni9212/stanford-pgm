
1
00:00:02,072 --> 00:00:08,080
So previously we defined the clique tree
algorithm which is just the belief propagation

2
00:00:08,080 --> 00:00:15,012
algorithm run over a graph that happens to
be a tree. As it turns out, we can exploit

3
00:00:15,012 --> 00:00:21,021
the aspects of the tree to greatly improve
the computational behavior of this

4
00:00:21,021 --> 00:00:27,036
algorithm, not just its correctness which
is what we've showed before. So let's go back for [inaudible

5
00:00:27,036 --> 00:00:33,073
message passing in this very simple
tree which has just these four clusters

6
00:00:33,073 --> 00:00:39,078
ab, bc, cd, de, and lets see what the
messages do. So here is the message delta<u>1-2</u>

7
00:00:39,078 --> 00:00:46,061
which is the message that is
passed on this edge. And here's the

8
00:00:46,061 --> 00:00:58,016
message delta<u>2-3 and so on. And these are
the six messages that we have. And now we</u>

9
00:00:58,016 --> 00:01:07,004
can notice one very important property.
Delta 1-2, once computed, never

10
00:01:07,004 --> 00:01:15,064
changes. So you get instant convergence of
Delta 1-2. Once you compute it for

11
00:01:15,064 --> 00:01:21,045
the very first time, there's convergence.
Now what about delta 2-3? Well, that

12
00:01:21,045 --> 00:01:27,068
depends on when delta 2-3 is passed. If
delta 2-3 is passed first, before it gets,

13
00:01:27,068 --> 00:01:33,043
before cluster two gets a message from
cluster one, then, once it gets that

14
00:01:33,043 --> 00:01:39,012
message, things might change. But if
cluster two is clever, it's gonna wait.

15
00:01:39,012 --> 00:01:45,011
And it waits until that message is passed.
And once that message is passed, it

16
00:01:45,011 --> 00:01:51,003
doesn't chance. Delta 2-3 doesn't change
either, ever, if it's smart enough to

17
00:01:51,003 --> 00:01:58,002
wait. What about delta 3-4? Delta 3-4
needs to wait a little bit longer, because

18
00:01:58,002 --> 00:02:04,052
it needs to wait for delta 2-3. But if it
waits for both delta 1-2 to be passed to

19
00:02:04,052 --> 00:02:11,003
cluster two, and delta 2-3 to be passed to
cluster three, then now it's, now that

20
00:02:11,003 --> 00:02:17,029
it's, now that it sends delta 3-4, delta
3-4 doesn't change either. So delta 2-3,

21
00:02:17,053 --> 00:02:27,015
has to wait, for, delta 1-2. And
delta 3-4 has to wait, for, delta 2-3

22
00:02:27,063 --> 00:02:32,053
but assuming it waits then
convergence is achieved in a single

23
00:02:32,053 --> 00:02:38,042
message passing step. Now there is nothing
magical about going left to right. If you

24
00:02:38,042 --> 00:02:43,082
go right to left you get the exact same
behavior. So, here you have this one

25
00:02:43,082 --> 00:02:59,051
converges instantly. This one, you need to
wait. For delta 4-3. And this one

26
00:02:59,051 --> 00:03:06,075
you need to wait. for delta 3-2. But again,
once, assuming you wait, then the messages

27
00:03:06,075 --> 00:03:14,027
converge in a single step. And so we can
compute all of the messages in this entire

28
00:03:14,027 --> 00:03:21,078
tree in one pass in either direction. One
pass from left to right, and one pass from

29
00:03:21,078 --> 00:03:28,021
right to left. In the context of chain
structures like this one, this is

30
00:03:28,021 --> 00:03:35,095
actually, this actually has its own name.
So for chains, you might see this under the

31
00:03:35,095 --> 00:03:47,090
name forward backward algorithm. And is
very commonly used in things like hidden

32
00:03:47,090 --> 00:03:55,066
Markov models and, and other similar chain
structured representations. And so the

33
00:03:55,066 --> 00:04:03,067
point is, the total effort that we had to
compute all of these messages is just one

34
00:04:03,067 --> 00:04:11,098
message passing step in each direction.
One from left to right, and one from right

35
00:04:11,098 --> 00:04:19,074
to left. And. The result of that, remember
that once all messages have been passed,

36
00:04:19,074 --> 00:04:31,052
we have beliefs that are correct beliefs
that represent. That are marginals of

37
00:04:31,052 --> 00:04:42,019
P tilde Phi. And so we've computed all of
the marginals, of all of the clusters in

38
00:04:42,019 --> 00:04:49,023
this graph in one, in, in sorry two,
sweeps over this clus, over this clique

39
00:04:49,023 --> 00:05:00,018
tree. And so more generally as we said,
once Ci received a final message from all

40
00:05:00,018 --> 00:05:06,043
of its neighbors except for Cj. It said,
wait to send, if it waits to send the

41
00:05:06,043 --> 00:05:12,059
message to j until, until I receive the
message from everybody else. Then that

42
00:05:12,059 --> 00:05:21,034
message delta ij is also final. So if
these are final, this is also final. Can

43
00:05:21,034 --> 00:05:25,084
you always find a message passing order,
that will achieve that goal? I mean, maybe

44
00:05:25,084 --> 00:05:30,029
you kind of, everybody ends up waiting for
everybody else, and they all get stuck,

45
00:05:30,029 --> 00:05:35,072
and they never send anybody any messages.
The point is that you could always start.

46
00:05:35,072 --> 00:05:40,091
Because the message from a leaf is always
immediately final. And once the message

47
00:05:40,091 --> 00:05:45,098
from a leaf is finalized, then you can
send the message from the parents of the

48
00:05:45,098 --> 00:05:51,011
leaf, and so on and so forth. And because
this is a tree, it's guaranteed that you

49
00:05:51,011 --> 00:05:58,059
will be able to find a legal message
passing order. And if we pass the messages

50
00:05:58,059 --> 00:06:06,097
in the right order, then we only need to
pass 2K minus one messages, where K is the

51
00:06:06,097 --> 00:06:15,031
total number. Of clusters. And why is
that? Because if you have a tree over k

52
00:06:15,031 --> 00:06:22,048
nodes, in this case k clusters, then
there's k minus one edges and since each

53
00:06:22,048 --> 00:06:29,085
edge has a message in both directions so
we have, we have k minus one messages,

54
00:06:29,085 --> 00:06:37,082
sorry, k minus one edges. And therefore
two k minus one messages, one in each

55
00:06:37,082 --> 00:06:44,075
direction. [sound] Let's look at a couple
of message-passing orders to see which

56
00:06:44,075 --> 00:06:49,053
ones are going to work and which ones
aren't. So, we can start with any leaf.

57
00:06:49,053 --> 00:06:55,073
Any leaf works. So, say, we start with,
oh, I don't know, C2. When C2 has

58
00:06:55,073 --> 00:07:00,089
passed this message. What other, what
other clique can pass its message?

59
00:07:00,089 --> 00:07:06,033
C3 can't pass messages yet. Because
it's still waiting for messages from all

60
00:07:06,033 --> 00:07:12,017
sorts of other guys. So we had to
go to another leaf. For example C1.

61
00:07:12,017 --> 00:07:18,048
C1 can pass the message now. Neither C3
nor C4 are, are candidates for message

62
00:07:18,048 --> 00:07:24,074
passing yet. Because each of them is still
waiting for another message. But C6 can

63
00:07:24,074 --> 00:07:30,070
pass a message, and now we have the option
of activating C4. C4 can now send a

64
00:07:30,070 --> 00:07:37,019
message to C3, because it's got everything
except the message from, from C3 before.

65
00:07:37,087 --> 00:07:42,087
C7 can say, pass a message to C3 and you
notice there is a lot of arbitrary

66
00:07:42,087 --> 00:07:48,001
decisions on how I ordered this. I could
have used C5 next. And now C3 has the

67
00:07:48,001 --> 00:07:57,042
option of passing a message to C5. And notice
at this point everyone has received all of

68
00:07:57,042 --> 00:08:06,039
the messages or all of the messages but
one. And so now we can start passing in

69
00:08:06,039 --> 00:08:19,047
the other direction, so C5 can pass the
message to C3. C3 can pass a message

70
00:08:19,047 --> 00:08:29,022
to any of C2, C7, or C4. And at this point
C4 can pass every, any, can pass the

71
00:08:29,022 --> 00:08:39,033
message to both C6 and C1. What is an
example of an illegal message passing

72
00:08:39,033 --> 00:08:44,029
order? So, for example, if C1 passes a
message to C4, and C4 jumps the gun and

73
00:08:44,029 --> 00:08:49,019
says, yay, I'm gonna send the message to
C3 next, that is an illegal message

74
00:08:49,019 --> 00:08:54,047
passing order, because C4 does not yet
have all of the information that it needs

75
00:08:54,047 --> 00:08:59,043
to pass a message to C3. It's still
waiting for a message from C6. So that's

76
00:08:59,043 --> 00:09:06,070
not a good ordering. Clique trees have
other very elegant computational

77
00:09:06,070 --> 00:09:11,095
properties, that make them a useful data
structure. So let's think about the kinds

78
00:09:11,095 --> 00:09:17,008
of queries that one can answer using,
clique trees. And some of these are fairly

79
00:09:17,008 --> 00:09:21,089
obvious, but others are a little bit more
subtle. So imagine that we wanted to

80
00:09:21,089 --> 00:09:26,077
answer a posterior distribution query on
either a single variable or a set of

81
00:09:26,077 --> 00:09:31,039
variables that appear together in a
clique. So in this case, you could take

82
00:09:31,039 --> 00:09:36,078
any clique that contains all of those
variables. And sum out the variables that

83
00:09:36,078 --> 00:09:43,015
you don't care about from that clique, to
get a posterior over just those variables.

84
00:09:43,015 --> 00:09:48,092
Now remember that, that posterior is P
tilde Phi, it's an unnormalized

85
00:09:48,092 --> 00:09:55,029
measure. So in order to get the normalized
measure, you actually need to renormalize.

86
00:09:58,096 --> 00:10:05,097
Now you could also do something a little
bit more clever. You could, say you wanted

87
00:10:05,097 --> 00:10:12,089
to introduce new evidence regarding, oh,
some variable and query another variable.

88
00:10:12,089 --> 00:10:24,004
So, this is a form of incremental inference.
Where you've already calibrated the

89
00:10:24,004 --> 00:10:28,093
clique tree and now you say, 'Oh,
wait a minute. I made another observation.

90
00:10:28,093 --> 00:10:35,064
Let's see what happens now.' So it turns
out that clique trees are really good for that.

91
00:10:35,089 --> 00:10:42,087
And so we're going to divide this into two
cases, the easy case and the slightly less

92
00:10:42,087 --> 00:10:49,019
easy case. So imagine that we want to
query variable X that appears in the

93
00:10:49,019 --> 00:10:56,009
clique with my new evidence. So here is my
clique and here is Z and here is X and I'm

94
00:10:56,009 --> 00:11:02,065
going to, and I want to figure out what
the posterior of X would be if I further

95
00:11:02,065 --> 00:11:10,000
observe Z. Well, this is actually real
easy. Cuz what I have here is

96
00:11:10,000 --> 00:11:16,020
P tilde phi. Let's assume for the moment to
just Z and X that there's other variables

97
00:11:16,020 --> 00:11:22,009
there, it's not, it doesn't change
anything cuz we can always just get rid of

98
00:11:22,009 --> 00:11:30,063
them. We can now condition or reduce the
clique so this is a clique reduction. By

99
00:11:30,063 --> 00:11:39,021
just restricting attention to the entries
that are consistent with my evidence Z.

100
00:11:39,021 --> 00:11:47,037
And then I end up with P tilde phi. Of
little z, X. And in order to get a

101
00:11:47,037 --> 00:11:53,055
posterior, I can sum out the irrelevant
variables and renormalize. That can be an

102
00:11:53,055 --> 00:12:00,049
incremental inference. That's the easy
case if the two variable are together in a

103
00:12:00,049 --> 00:12:06,045
clique. What about a some of more
elaborate case, where I introduce the new

104
00:12:06,045 --> 00:12:12,080
evidence and I query a variable that
doesn't appear in the same variable, in

105
00:12:12,080 --> 00:12:18,091
the same clique as Z? So using an example,
let's imagine what I did is observe

106
00:12:18,091 --> 00:12:24,056
evidence on A and I want to query
say E [inaudible], actually let's look at

107
00:12:24,056 --> 00:12:35,002
different example let's imagine I want to
query D. [inaudible] In this case, I

108
00:12:35,002 --> 00:12:46,082
can do the following. I can. Multiply wa-,
this indicator function or what we call

109
00:12:46,082 --> 00:12:57,057
this reduction. Of the factor. Into a
cluster that contains the evidence. In

110
00:12:57,057 --> 00:13:04,045
this case we're gonna multiply in the
indicator function of A equals little a,

111
00:13:04,045 --> 00:13:10,098
which corresponds to removing all the
entries in cluster one that are not

112
00:13:10,098 --> 00:13:24,047
consistent with, With a. Our [inaudible]
multiplied into psi one, removing. All

113
00:13:24,047 --> 00:13:38,075
entries that are inconsistent with that.
So now what happens when we change psi 1?

114
00:13:38,075 --> 00:13:44,067
Imagine what we're doing this entire
computations from scratch, that is forget

115
00:13:44,067 --> 00:13:49,068
everything that we did before and think
what would happen to this model in a

116
00:13:49,068 --> 00:13:54,088
hypothetical case that we were passing
messages with the new psi 1 instead of

117
00:13:54,088 --> 00:14:00,015
the old psi 1. Yes some messages would
change. Which messages would change?

118
00:14:00,015 --> 00:14:05,092
Delta 1-2 would change, because psi 1
changed. Delta 2-3 would change because

119
00:14:06,020 --> 00:14:13,091
Delta 1-2 changed. Delta 3-4 would change
but we don't care about Delta 3-4. We're

120
00:14:13,091 --> 00:14:21,044
interested in this belief over here.
What about other messages?

121
00:14:21,044 --> 00:14:32,031
Delta 4-3 doesn't change. Neither does delta 3-2.
Neither, neither does delta of 2-1.

122
00:14:32,031 --> 00:14:38,089
And so only assumption of the
messages in the clique tree change as a

123
00:14:38,089 --> 00:14:46,023
result of this messages of this of this
change, which means that we can review at

124
00:14:46,023 --> 00:14:53,049
least half the messages, if not more, in
computing our beliefs about in this case

125
00:14:53,049 --> 00:14:59,023
cluster three. And the only messages that
we need to recompute are the messages that

126
00:14:59,023 --> 00:15:03,062
are along the path to a clique that
contains the variable X that we want to

127
00:15:03,062 --> 00:15:10,001
query. Which in this case is cluster
three. So to summarize, if we have a

128
00:15:10,001 --> 00:15:15,082
clique tree with k cliques, and we pass
messages in a careful order, which means

129
00:15:15,082 --> 00:15:22,022
that we start at the leaves and propagate
inwards, then we can construct an ordering

130
00:15:22,022 --> 00:15:28,054
such that two k minus one messages suffice
to compute all of the beliefs in, in the,

131
00:15:28,054 --> 00:15:34,043
in the clique tree which means we get a
posterior over every single variable in

132
00:15:34,043 --> 00:15:39,012
the model. Contrast that with the
computational cost of running variable

133
00:15:39,012 --> 00:15:43,097
elimination and times the computed
posterior as end different variable. Here

134
00:15:43,097 --> 00:15:49,027
you get a considerable computational
saving. In fact, computational savings of,

135
00:15:49,047 --> 00:15:55,032
order, order of the number of variables.
And so what we can do is we can compute

136
00:15:55,032 --> 00:16:00,049
all of the marginal at only twice the
cost of variable elimination as opposed to

137
00:16:00,049 --> 00:16:06,000
N times the cost of variable elimination.
And we've also shown that by caching,

138
00:16:06,000 --> 00:16:10,060
restoring the messages, we can use
inference for example in the context of

139
00:16:10,060 --> 00:16:15,083
incremental queries which provides us with
a useful data structure to keep updating

140
00:16:15,083 --> 00:16:18,007
as we obtain additional edivence.
